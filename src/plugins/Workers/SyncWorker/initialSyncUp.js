const _ = require('lodash');
const logger = require('../../../logger');
const fetchAddressTransactions = require('./utils/fetchAddressTransactions');
const TransactionOrderer = require('./utils/TransactionOrderer/TransactionOrderer');
// This method is called as first thing by the SyncWorker.
// It's only when resolved that the Wallet will be ready (for what SyncWorker do)
// And therefore that's where we need to deal with all necessary step
// such as fetching all UTXO and previous TX.
//
// It should deal with additional addresses generated by a BIP44 Worker if
// fetching here found that we have more addresses that on starting of the sync up.
module.exports = async function initialSyncUp() {
  const { transporter, storage } = this;
  const addrList = this.getAddressListToSync().map((addr) => addr.address);

  // Due to the events system, we need to handle the fact that we did subscribed to addresses
  // that we had received the transactions and store before
  // being able to release initialSyncUp as ready.
  // When we will move to bloomfilter, that part might be more complex.

  const boundFetchAddressTransactions = _.bind(fetchAddressTransactions, null, _, transporter);
  const transactionPromises = addrList.map(boundFetchAddressTransactions);

  const transactionsByAddresses = await Promise.all(transactionPromises);

  const transactions = _.flatten(transactionsByAddresses);

  const ordered = new TransactionOrderer();

  transactions.forEach((tx) => ordered.insert(tx));

  const boundImportTransaction = _.bind(storage.importTransaction, storage, _, transporter);
  const importPromises = ordered.transactions.map(boundImportTransaction);

  await Promise.all(importPromises);

  logger.silly('SyncWorker - initialSyncUp - Fully synced');
};
